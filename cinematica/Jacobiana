#include <iostream>
#include <cmath>

using namespace std;

float PI = 3.1415;

float xP, yP, theta1, theta2, phi, q1, q2, w1, w2, vz, vd, vi, z, alto;
float L1 = 15;
float L2 = 15;
float FACTOR_A = 3; 
float FACTOR_B = 4;


void jacobiana_inversa(float q1, float q2, float Vx, float Vy){
    float w1,w2;
    float L1=1, L2=1;
    if(cos(q1)*sin(q1+q2)-sin(q1)*cos(q1+q2)==0){
        cout<<"Singularidad\n";
    }
    else{
        w1=(-cos(q1 + q2)/(L1*cos(q1 + q2)*sin(q1) - L1*sin(q1 + q2)*cos(q1)))*Vx + (-sin(q1 + q2)/(L1*cos(q1 + q2)*sin(q1) - L1*sin(q1 + q2)*cos(q1)))*Vy;
        w2=((L2*cos(q1 + q2) + L1*cos(q1))/(L1*L2*cos(q1 + q2)*sin(q1) - L1*L2*sin(q1 + q2)*cos(q1)))*Vx + ((L2*sin(q1 + q2) + L1*sin(q1))/(L1*L2*cos(q1 + q2)*sin(q1) - L1*L2*sin(q1 + q2)*cos(q1)))*Vy;
        cout<<w1<<","<<w2<<"\n";
    }
    
}

void jacobiana_directa(float q1, float q2, float w1, float w2){
    float Vx,Vy;
    float L1=1, L2=1;
    if(q2==0){
        cout<<"Singularidad\n";
    }
    else{
        Vx=(-L1*sin(q1)-L2*sin(q1+q2))*w1 + (-L2*sin(q1+q2))*w2;
        Vy=(L1*cos(q1)+L2*cos(q1+q2))*w1 + (L2*cos(q1+q2))*w2;
        
        cout<<Vx<<","<<Vy<<"\n";
    }
}

int main()
{
    
    jacobiana_directa(PI/2,PI/4,0,-1);
    
    cout<<"\n";
    
    jacobiana_inversa(PI/2,PI/4,0.7071,0.7071);
    
    

    return 0;
}
