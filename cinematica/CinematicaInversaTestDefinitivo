#include <iostream>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>

#define pi 3.141592
#define RAD2GRAD  180/pi;

using namespace std;

float len1 = 4;
float len2 = 2;
float x;
float y;

float Q1=0, Q2=0;

//CinematicaInversa(x, y, len1, len2, &Q1, &Q2); // Para llamar a la funcion

//Funcion: 

float
lawOfCosines (float a, float b, float c)
{
  return acosf ((a * a + b * b - c * c) / (2.0f * a * b));
}

float
lawOfCosines2 (float a, float b, float c)
{
  return acosf ((a * a - b * b - c * c) / (2.0f * b * c));
}

float
distance (float x, float y)
{
  return sqrt (x * x + y * y);
}

// TODO refactor len1, len2
void
CinematicaInversa (float x, float y, float len1, float len2, float *Q1,
		   float *Q2)
{
  float r;
  float aux1, aux2;
  r = distance (x, y);

  if (y < 0 || r < len2)
    {				// fuera de campo de trabajo
    cout<< "Coordenadas error ";
//SerialUSB.println("Coordenadas no validas")
    }
  else
    {
      if (r > (len1 + len2))
	{
	  r = (len1 + len2) - 0.001f;
	  //SerialUSB.println("IK overflow->limit");
	}

      if (x > 0)
	{
	  aux1 = (atan2 (y, x))*RAD2GRAD;	//beta
	  aux2 = (lawOfCosines (r, len1, len2))*RAD2GRAD;	//alpha
	  *Q1 = (aux1 - aux2);
	  *Q2 = (lawOfCosines2 (r, len1, len2))*RAD2GRAD;
	    cout << "aux1: "<< aux1 <<" aux2: "<< aux2 << "\n";
	}
      if (x == 0)
	{
	  x = x + 0.001f;
	  aux1 = (atan2 (y, x))*RAD2GRAD;	//beta
	  aux2 = (lawOfCosines (r, len1, len2))*RAD2GRAD;	//alpha
	  *Q1 = (aux1 - aux2);
	  *Q2 = (lawOfCosines2 (r, len1, len2))*RAD2GRAD;
	   cout << "aux1: "<< aux1 <<" aux2: "<< aux2 << "\n";
	}
      if (x < 0)
	{
	  aux1 = (atan2 (-y, -x))*RAD2GRAD;	//beta
	  aux2 = (lawOfCosines (r, len1, len2))*RAD2GRAD;	//alpha
	  *Q1 = 180+(aux1 - aux2); // 180 + un numero negativo
	  *Q2 = (lawOfCosines2 (r, len1, len2))*RAD2GRAD;
	   cout << "aux1: "<< aux1 <<" aux2: "<< aux2 << "\n";
	}
    }
}

int
main ()
{

  x = -6;
  y = 0;
  CinematicaInversa (x, y, len1, len2, &Q1, &Q2);
  cout << Q1 << "; " << Q2;
 



  return 0;
}
