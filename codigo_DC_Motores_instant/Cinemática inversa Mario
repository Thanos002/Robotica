/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <math.h>

#define DLENGTH 93   //primer brazo len1
#define ILENGTH 106.5  //segundo brazo Len2
#define RAD2DEG 57.2957795
#define DEG2RAD 0.01745329252

float lawOfCosines(float a, float b, float c) {
  return acosf((a * a + b * b - c * c) / (2.0f * a * b));
}

float lawOfCosines2(float a, float b, float c) {
  return acosf((a * a - b * b - c * c) / (2.0f * b * c));
}

float distance(float x, float y) {
  return sqrt(x * x + y * y);
}

void cinematicaInversa(float x, float y, float *Q1, float *Q2) {
  *Q1 = *Q1 + 90;  // adjust zero position for calcs
  float r;
  float aux1, aux2;
  r = distance(x, y);
  cout<< r <<endl;

  if (y < 0 || r < DLENGTH) {  // fuera de campo de trabajo
    Serial.print(4);
    Serial.print(",");
    Serial.print(5);
    Serial.print(",");
    Serial.print(x);
    Serial.print(",");
    Serial.println(y);
  } else {
    if (r > (DLENGTH + ILENGTH)) {
      r = (DLENGTH + ILENGTH) - 0.001f;
      Serial.print(4);
      Serial.print(",,");
      Serial.print(5);
      Serial.print(",");
      Serial.print(x);
      Serial.print(",");
      Serial.println(y);
    }

    if (x > 0) {
      aux1 = (atan2(y, x)) * RAD2DEG;                        //beta
      aux2 = (lawOfCosines(r, DLENGTH, ILENGTH)) * RAD2DEG;  //alpha
      *Q1 = 90-(aux1 - aux2);
      *Q2 =- (lawOfCosines2(r, DLENGTH, ILENGTH)) * RAD2DEG;
            if(*Q1 > 90){
                *Q1 = 180 - 2*atan2(y,x)* RAD2DEG - *Q1;
                *Q2 = -*Q2;
            }
     ;
    }
    if (x == 0) {
      x = x + 0.001f;
      aux1 = (atan2(y, x)) * RAD2DEG;                        //beta
      aux2 = (lawOfCosines(r, DLENGTH, ILENGTH)) * RAD2DEG;  //alpha
      *Q1 = 90-(aux1 - aux2);
      *Q2 = -(lawOfCosines2(r, DLENGTH, ILENGTH)) * RAD2DEG;
      
    }
    if (x < 0) {
      aux1 = (atan2(y, x)) * RAD2DEG;                      //beta
      aux2 = (lawOfCosines(r, DLENGTH, ILENGTH)) * RAD2DEG;  //alpha
      *Q1 =  90-(aux1 - aux2);                              // 180 + un numero negativo
      *Q2 = -(lawOfCosines2(r, DLENGTH, ILENGTH)) * RAD2DEG;
     
    }
  }
  //*Q1 = *Q1 - 90;  // adjust zero position for rest of code
  //*Q2 = -*Q2;
}
