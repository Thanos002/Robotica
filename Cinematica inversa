CinematicaInversa(x, y, len1, len2, &Q1, &Q2); // Para llamar a la funcion

//Funcion: 

float lawOfCosines(float a, float b, float c)
{
return acosf((a*a + b*b - c*c) / (2.0f * a * b));
}

float lawOfCosines2(float a, float b, float c)
{
return acosf((a*a - b*b - c*c) / (2.0f * b * c));
}

float distance(float x, float y)
{
return sqrt(x*x +y*y);
}

void CinematicaInversa(float x, float y, float len1, float len2, float *Q1, float *Q2){
float r;
float aux1, aux2;
r = distance(x,y);

if(y<0 || r<len2){
SerialUSB.println("Coordenadas no validas")
  }  
else{
  if (r > (len1+len2)){
  r = (len1+len2)-0.001f;
  SerialUSB.println("IK overflow->limit");
                      }  

  if(x>0){
  aux1 = atan2(y,x);  //beta
  aux2 = lawOfCosines(r, len1, len2); //alpha
  *Q1 = (aux1 + aux2)*RAD2GRAD;
  *Q2 = lawOfCosines2(r, len1, len2)*RAD2GRAD;
        }                                           
  if(x == 0){
  x=x+0.001f;
  aux1 = atan2(y,x);  //beta
  aux2 = lawOfCosines(r, len1, len2); //alpha
  *Q1 = (aux1 + aux2)*RAD2GRAD;
  *Q2 = lawOfCosines2(r, len1, len2)*RAD2GRAD;
            }
  if(x<0){
  aux1 = atan2(y,x);  //beta
  aux2 = lawOfCosines(r, len1, len2); //alpha
  *Q1 = 180+(aux1 + aux2)*RAD2GRAD;  //180 + pq aux1+aux2 saldrÃ¡ <0
  *Q2 = lawOfCosines2(r, len1, len2)*RAD2GRAD;
        }
}
